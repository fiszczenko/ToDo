require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ListsController do

  # This should return the minimal set of attributes required to create a valid
  # List. As you add validations to List, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "title" => "MyString" } }

  before (:each) do
	  @user = FactoryGirl.create(:user)
	  sign_in @user
  end

  describe "GET index" do
    it "assigns all lists as @lists" do
      list = List.create! valid_attributes
      get :index, {}
      assigns(:lists).should eq([list])
    end
  end

  describe "GET show" do
    it "assigns the requested list as @list" do
      list = List.create! valid_attributes
      get :show, {:id => list.to_param}
      assigns(:list).should eq(list)
    end
  end

  describe "GET new" do
    it "assigns a new list as @list" do
      get :new, {}
      assigns(:list).should be_a_new(List)
    end
  end

  describe "GET edit" do
    it "assigns the requested list as @list" do
      list = List.create! valid_attributes
      get :edit, {:id => list.to_param}
      assigns(:list).should eq(list)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new List" do
        expect {
          post :create, {:list => valid_attributes}
        }.to change(List, :count).by(1)
      end

      it "assigns a newly created list as @list" do
        post :create, {:list => valid_attributes}
        assigns(:list).should be_a(List)
        assigns(:list).should be_persisted
      end

      it "redirects to the created list" do
        post :create, {:list => valid_attributes}
        response.should redirect_to(List.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved list as @list" do
        # Trigger the behavior that occurs when invalid params are submitted
        List.any_instance.stub(:save).and_return(false)
        post :create, {:list => { "title" => "invalid value" }}
        assigns(:list).should be_a_new(List)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        List.any_instance.stub(:save).and_return(false)
        post :create, {:list => { "title" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do

      it "assigns the requested list as @list" do
        list = List.create! valid_attributes
        put :update, {:id => list.to_param, :list => valid_attributes}
        assigns(:list).should eq(list)
      end
	end

    describe "with invalid params" do
      it "assigns the list as @list" do
        list = List.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        List.any_instance.stub(:save).and_return(false)
        put :update, {:id => list.to_param, :list => { "title" => "invalid value" }}
        assigns(:list).should eq(list)
      end

    end
  end


end
